@page "/vendor/listings"
@using GameVault.Shared.DTOs
@using GameVault.Shared.Models
@using Grpc.Net.Client.Balancer
@inject NavigationManager Nav
@inject Services.AuthService AuthService
@inject Services.ListingService ListingService

<PageTitle>@filter Listings</PageTitle>

<h3>View Listings</h3>

@* TODO: Tab bar styling *@
@foreach (var listingStatus in Enum.GetValues<ListingStatus>())
{
  <button @onclick="() => {
    filter = listingStatus;
    return LoadData();
  }" class="btn mb-2 @(listingStatus == filter ? "btn-primary" : "btn-secondary")">@listingStatus</button>
}
<button @onclick='() => Nav.NavigateTo("/vendor/listings/create")' class="btn btn-secondary">Create New</button>
@* Hardcoded: *@
@* <button @onclick="TabPublished">Published</button>
<button @onclick="TabDraft">Draft</button>
<button @onclick="TabPending">Pending</button>
<button @onclick="TabRemoved">Removed</button> *@

@if (listings == null)
{
  @if (error == string.Empty) {
    <p><em>Loading...</em></p>
  } else {
    <p class="alert alert-danger mt-2"><em>@error</em></p>
  }
}
else if (listings.Count == 0)
{
  <p><em>No listings found with status "@filter"</em></p>
} else {
  <table class="table">
  <thead>
    <tr>
      @switch (filter) {
          case ListingStatus.Inactive:
            <th>Modified</th>;
            break;
          case ListingStatus.Pending:
            <th>Submitted</th>;
            break;
          case ListingStatus.Removed:
            <th>Removed</th>;
            break;
          case ListingStatus.Published:
            <th>Published</th>;
            break;
        }
      <th>Name</th>
      <th>Price</th>
      <th>Stock</th>
      @if (filter == ListingStatus.Removed) {
        <th>Removal Message</th>
      }
      @* TODO: Maybe put removal reason here?
      (But would require storing somewhere and distinguishing between vendor removed and admin removed) *@
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    @foreach (var listing in listings)
    {
      <tr>
        <td>@listing.LastModified.ToString()</td>
        <td>@listing.Name</td>
        <td>@((listing.Price / 100M).ToString("C2"))</td>
        @if (listing.Id == editingStock) {
          <td><InputNumber @bind-Value="@stock" /></td>
        } else {
          <td>@listing.Stock</td>
        }
        @if (filter == ListingStatus.Removed) {
          <td>@listing.RemoveMsg</td>
        }
        <td>
          @if (filter == ListingStatus.Inactive || filter == ListingStatus.Removed) {
            <button @onclick='async () => Nav.NavigateTo($"/listings/edit/{listing.Id}")'>Edit</button>
          } else {
            @if (listing.Id == editingStock) {
              <div>
                <button @onclick='CancelStock'>Cancel</button>
                <button @onclick='UpdateStock'>Save</button>
              </div>
            } else {
              <button @onclick='async () => await EditStock(listing.Id, listing.Stock)'>Change Stock</button>
            }
          }
          @if (filter == ListingStatus.Inactive) {
            <button @onclick='async () => {await ListingService.ChangeListingStatusToPending(listing.Id); await LoadData();}'>Submit</button>
          }
          @if (filter == ListingStatus.Pending) {
            <button @onclick='async () => {await ListingService.ChangeListingStatusToInactive(listing.Id); await LoadData();}'>Cancel Request</button>
          }
          @if (filter == ListingStatus.Published) {
            <button @onclick='async () => {await ListingService.ChangeListingStatusToInactive(listing.Id); await LoadData();}'>Unpublish</button>
          }
        </td>
      </tr>
    }
  </tbody>
  </table>
}

@code {
  public ListingStatus filter = 0;
  public string error = string.Empty;
  public int stock = -1;
  public string editingStock = string.Empty;

  private List<VendorListingDTO>? listings;

  private async Task EditStock(string listingId, int initialStock) {
    stock = initialStock;
    editingStock = listingId;
  }
  private async Task CancelStock() {
    editingStock = string.Empty;
    stock = -1;
  }
  private async Task UpdateStock() {
    // Assume logged in and all associated stuff
    // Verify within allowable range of stock
    await ListingService.UpdateStockAsync(editingStock, stock);
    editingStock = string.Empty;
    stock = -1;
    await LoadData();
  }
  private async Task LoadData()
  {
    listings = null;
    @* loading = true; *@
    @* Console.WriteLine("Set loading to true"); *@

    // Call Firestore
    if (AuthService.CurrentUserId is not null) {
      VendorListingListResponse result = (await ListingService.GetVendorListingsByStatus(AuthService.CurrentUserId, filter));
      listings = result.Listings;
      @* Console.WriteLine($"Client got {listings?.Count} listings"); *@
      error = result.Message ?? "";
      await InvokeAsync(StateHasChanged);
    } else {
      Console.WriteLine("Not logged in");
      error = "Not logged in";
    }
    @* loading = false; *@
    @* Console.WriteLine("Set loading to false"); *@
  }

  protected override async Task OnInitializedAsync()
  {
    await LoadData();
  }
}