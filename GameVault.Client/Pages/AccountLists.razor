@page "/manageAccounts/{StatusFilter}"
@inject NavigationManager Nav
@inject Services.AccountService AccountService
@inject Services.ListingService ListingService
@inject Services.AuthService AuthService
@using GameVault.Client.Services
@using System.Runtime.CompilerServices
@using GameVault.Shared.Models
@using System.Reflection
@using GameVault.Shared.DTOs
@using Grpc.Net.Client.Balancer

<h3>@PageTitle</h3>

<header>
    <button @onclick='() => Nav.NavigateTo("/manageAccounts/pendingVendors")' class="btn btn-secondary">Pending Vendor
        Accounts</button>
    <button @onclick='() => Nav.NavigateTo("/manageAccounts/activeVendors")' class="btn btn-secondary">Vendor
        Accounts</button>
    <button @onclick='() => Nav.NavigateTo("/manageAccounts/userAccounts")' class="btn btn-secondary">Customer
        Accounts</button>
    <button @onclick='() => Nav.NavigateTo("/manageAccounts/bannedAccounts")' class="btn btn-secondary">Banned
        Accounts</button>
    <button @onclick='() => Nav.NavigateTo("/adminAccounts")' class="btn btn-secondary">Admin
        Accounts</button>
</header>

@if (StatusFilter == "pendingVendors")
{

    // Reason for denial
    @if (showDenialPopup)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Feedback</h5>
                        <button type="button" class="btn-close" @onclick="CloseDenialPopup"></button>
                    </div>
                    <div class="modal-body p-0">
                        <!-- Load another page inside the modal -->
                        <h3>Feedback</h3>
                        <p>Enter reason for denial</p>
                        <input type="text" id="reason" class="form-control" @bind="RejectionReason"
                            placeholder="Enter reason" />
                    </div>
                    <div class="modal-footer bg-light p-3 d-flex justify-content-end gap-2">
                        <button type="button" class="btn-approve"
                            @onclick='HandleDenyRequest'>Deny Request</button>
                        <button type="button" class="btn-deny" @onclick='CloseDenialPopup'>Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }

}
else if (StatusFilter == "activeVendors" || StatusFilter == "userAccounts" || StatusFilter == "bannedAccounts")
{
    @if (accounts == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (accounts.Count == 0)
    {
        <p><em>No accounts found with status "@StatusFilter".</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Email</th>
                    @if (StatusFilter == "activeVendors") {
                        <th>Name</th>
                        <th>Reviewed By</th>
                    } else if (StatusFilter == "bannedAccounts") {
                        <th>Type</th>
                        <th>Ban Reason</th>
                    }
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in accounts)
                {
                    <tr>
                    <td>@user.Email</td>
                    @if (StatusFilter == "activeVendors") {
                        <td>@user.Name</td>
                        <td>@user.ReviewedBy</td>
                    }else if (StatusFilter == "bannedAccounts") {
                        <td>@user.Type</td>
                        <td>@user.BanMsg</td>
                    }
                        @if (StatusFilter == "activeVendors" || StatusFilter == "userAccounts")
                        {
                            <td><button type="button" class="btn-ban" @onclick='async () => { OpenBanPopup(user); }'>Ban</button>
                            </td>
                        } else {
                            <td><button type="button" class="btn-ban" @onclick='async () => { await HandleUnbanUser(user); }'>Unban</button></td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }

    // Ban Confirmation
    @if (showBanPopup)
    {
        <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirmation</h5>
                        <button type="button" class="btn-close" @onclick="CloseBanPopup"></button>
                    </div>
                    <div class="modal-body p-0">
                        <h3>Confirmation</h3>
                        <p>Are you sure?</p>
                        <p>Enter reason for ban</p>
                        <input type="text" id="reason" class="form-control" @bind="RejectionReason"
                            placeholder="Enter reason" />
                    </div>
                    <div class="modal-footer bg-light p-3 d-flex justify-content-end gap-2">
                        <button type="button" class="btn-approve"
                            @onclick='HandleBanUser'>Ban User</button>
                        <button type="button" class="btn-deny" @onclick='CloseBanPopup'>Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <p><em>No accounts of this category</em></p>
}





@code {
    [Parameter]
    public string StatusFilter { get; set; } = string.Empty;
    private List<RequestDTO>? requests;
    private List<UserDTO>? accounts;
    private bool showBanPopup;
    private bool showDenialPopup;
    private string RejectionReason = string.Empty;
    private RequestDTO? selectedRequest;
    private UserDTO? selectedUser;

    private void OpenDenialPopup(RequestDTO selected) {
        selectedRequest = selected;
        RejectionReason = string.Empty;
        showDenialPopup = true;
    }

    private void CloseDenialPopup() {
        showDenialPopup = false;
        selectedRequest = null;
    }

    private void OpenBanPopup(UserDTO selected) {
        selectedUser = selected;
        RejectionReason = string.Empty;
        showBanPopup = true;
    }

    private void CloseBanPopup() {
        showBanPopup = false;
        selectedUser = null;
    }

    private async Task HandleDenyRequest() {
        @* await AccountService.AddRemovalReason(selectedEntry.UserID, RejectionReason); *@
        CloseDenialPopup();
        await LoadData();
    }

    private async Task HandleBanUser() {
        @* await AccountService.ChangeAccountStatusToBanned(selectedEntry.UserID);  *@
        /* await ListingService.ChangeAllVendorListingsToInactive(selectedEntry.UserID); */
        await AccountService.BanAccount(selectedUser.Id, RejectionReason);
        await LoadData(); 
        CloseBanPopup();
    }

    private async Task HandleUnbanUser(UserDTO user) {
        await AccountService.UnbanAccount(user.Id);
        await LoadData();
    }

    private string PageTitle =>
    StatusFilter switch
    {
        "pendingVendors" => "Pending Vendor Accounts",
        "activeVendors" => "Active Vendor Accounts",
        "userAccounts" => "Customer Accounts",
        "bannedAccounts" => "Banned Accounts",
        _ => "Accounts"
    };

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        requests = null;
        accounts = null;
        try
        {
            if (StatusFilter == "activeVendors" || StatusFilter == "userAccounts" || StatusFilter == "bannedAccounts") {
                ListResponse<UserDTO>? result;
                if (StatusFilter == "activeVendors") {
                    result = await AccountService.GetVendorAccounts();
                } else if (StatusFilter == "userAccounts") {
                    result = await AccountService.GetCustomerAccounts();
                } else { // if (StatusFilter == "bannedAccounts") {
                    result = await AccountService.GetBannedAccounts();
                }
                if (result is not null && result.Success)
                {
                    accounts = result.List;
                }
                // Else print error
                await InvokeAsync(StateHasChanged);
            } else if (StatusFilter == "pendingVendors") {
                ListResponse<RequestDTO>? result;
                result = await AccountService.GetVendorRequests();
                if (result is not null && result.Success)
                {
                    requests = result.List;
                }
                // Else print error
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading Firebase data: {ex.Message}");
        }
    }
}