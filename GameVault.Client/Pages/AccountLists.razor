@page "/manageAccounts/{StatusFilter}"
@inject NavigationManager Nav
@inject Services.AccountService AccountService
@inject Services.ListingService ListingService
@inject Services.AuthService AuthService
@using GameVault.Client.Services
@using System.Runtime.CompilerServices
@using GameVault.Shared.Models
@using System.Reflection
@using GameVault.Shared.DTOs
@using Grpc.Net.Client.Balancer

<h3>@PageTitle</h3>

<header>
    <nav>
        <ul>
            <li><a href="/manageAccounts/pendingVendors">Pending Vendor Accounts</a></li>
            <li><a href="/manageAccounts/activeVendors">Vendor Accounts</a></li>
            <li><a href="/manageAccounts/userAccounts">User Accounts</a></li>
            <li><a href="/manageAccounts/bannedAccounts">Banned Accounts</a></li>
        </ul>
    </nav>
</header>

@if (entries == null)
{
    <p><em>Loading...</em></p>
}
else if (entries.Count == 0)
{
    <p><em>No accounts found with status "@StatusFilter".</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var entry in entries)
            {
                <tr>
                    <td>
                        @if (StatusFilter == "pendingVendors")
                        {
                            <a @onclick="() => OpenModal(entry)">@entry.DisplayName</a>
                        }
                        else
                        {
                            @entry.DisplayName
                        }
                    </td>
                    <td>@entry.ApprovalStatus</td>
                    @if (StatusFilter == "activeVendors" || StatusFilter == "userAccount")
                    {
                        <td><button type="button" class="btn-ban" @onclick='async () => { OpenConfirmation(entry); }'>Ban</button></td>
                    }
                    @* TODO: Add unban (Ensure Customer -> Customer & Vendor -> Vendor)
                    @if (StatusFilter == "bannedAccounts")
                    {
                        <td><button type="button" class="btn-ban" @onclick='async () => { await AccountService.ChangeAccountStatusToActive(entry.UserID); await LoadData(); CloseModal(); }'>Unban</button></td>
                    }*@
                </tr>
            }
        </tbody>
    </table>
}

@if (showModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@selectedEntry?.DisplayName Details</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal"></button>
                </div>
                <div class="modal-body p-0">
                    <!-- Load another page inside the modal -->
                    <iframe src="@selectedPageUrl" width="100%" height="600px" frameborder="0"></iframe>
                </div>
                <div class="modal-footer fixed-bottom bg-light p-3 d-flex justify-content-end gap-2">
                    <button type="button" class="btn-approve" @onclick='async () => { await AccountService.ChangeAccountStatusToActive(selectedEntry.UserID); await LoadData(); CloseModal(); }'>Approve</button>
                    <button type="button" class="btn-deny" @onclick='async () => { await AccountService.ChangeAccountStatusToDenied(selectedEntry.UserID); await LoadData(); OpenFeedback(selectedEntry); CloseModal();}'>Deny</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showConfirmation)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirmation</h5>
                    <button type="button" class="btn-close" @onclick="CloseConfirmation"></button>
                </div>
                <div class="modal-body p-0">
                    <!-- Load another page inside the modal -->
                    <h3>Confirmation</h3>
                    <p>Are you sure?</p>
                </div>
                <div class="modal-footer fixed-bottom bg-light p-3 d-flex justify-content-end gap-2">
                    <button type="button" class="btn-approve" @onclick='async () => { await AccountService.ChangeAccountStatusToBanned(selectedEntry.UserID); /* await ListingService.ChangeAllVendorListingsToInactive(selectedEntry.UserID); */ await LoadData(); CloseConfirmation(); }'>Approve</button>
                    <button type="button" class="btn-deny" @onclick='async () => { CloseConfirmation(); }'>Deny</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showFeedback)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Feedback</h5>
                    <button type="button" class="btn-close" @onclick="CloseFeedback"></button>
                </div>
                <div class="modal-body p-0">
                    <!-- Load another page inside the modal -->
                    <h3>Feedback</h3>
                    <p>Enter reason for denial</p>
                    <input type="text" id="reason" class="form-control" @bind="RejectionReason" placeholder="Enter reason" />
                </div>
                <div class="modal-footer fixed-bottom bg-light p-3 d-flex justify-content-end gap-2">
                    <button type="button" class="btn-approve" @onclick='async () => { await AccountService.AddRemovalReason(selectedEntry.UserID, RejectionReason); CloseFeedback(); await LoadData();}'>Send Feedback</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] 
    public string StatusFilter { get; set; } = string.Empty;
    private string RejectionReason;
    public AccountStatus filter = 0;
    private List<AccountDTO> entries;
    private AccountDTO? selectedEntry;
    private string selectedPageUrl;

    private bool showModal;
    private bool showConfirmation;
    private bool showFeedback;

    private string PageTitle =>
        StatusFilter switch
        {
            "pendingVendors" => "Pending Vendor Accounts",
            "activeVendors" => "Active Vendor Accounts",
            "userAccounts" => "User Accounts",
            "bannedAccounts" => "Banned Accounts",
            _ => "Accounts"
        };

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        entries = null;
        try
        {
            filter = MapStatus(StatusFilter);
            AccountListResponse result = await AccountService.GetAccountsByStatus(filter);
            entries = result.Accounts;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading Firebase data: {ex.Message}");
            entries = new();
        }
    }

    private AccountStatus MapStatus(string StatusFilter)
    {
        return StatusFilter switch
        {
            "pendingVendors" => AccountStatus.PendingVendor,
            "activeVendors" => AccountStatus.ActiveVendor,
            "userAccounts" => AccountStatus.Customer,
            "bannedAccounts" => AccountStatus.Banned,
            "denied" => AccountStatus.Denied,
            _ => AccountStatus.Denied
        };
    }

    private void OpenModal(AccountDTO entry)
    {
        selectedEntry = entry;
        selectedPageUrl = $"/vendorDetails/{entry.UserID}";
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void OpenConfirmation(AccountDTO entry)
    {
        selectedEntry = entry;
        showConfirmation = true;
    }

    private void CloseConfirmation()
    {
        showConfirmation = false;
    }

    private void OpenFeedback(AccountDTO entry)
    {
        selectedEntry = entry;
        showFeedback = true;
    }

    private void CloseFeedback()
    {
        showFeedback = false;
    }
}

