@using GameVault.Client.Services
@using GameVault.Shared.Models
@using GameVault.Shared.DTOs
@inject HttpClient Http
@inject ILogger<CartItemCard> Logger
@inject CartService CartService

<div>
    <img src="@Item.ThumbnailUrl" alt="@Item.ListingName" />

    <div>
        <h3>@Item.ListingName</h3>
        <p>Sold by: @Item.VendorName</p>
        <p>Price: $@FormatPrice(Item.PriceInCents)</p>
        <p>Quantity: @Item.Quantity</p>
        <p>Total Price: $@FormatPrice(Item.LineTotalInCents)</p>

        <QuantitySelector Quantity="@Item.Quantity" QuantityChanged="OnQuantityChanged" />

        <button @onclick="RemoveFromCartAsync" disabled="@_isUpdating">Remove</button>
    </div>
</div>

@code
{
    [Parameter] public CartItemDTO Item { get; set; } = null!;
    [Parameter] public EventCallback OnCartChanged { get; set; }

    private bool _isUpdating = false;

    private string FormatPrice(int priceInCents)
    {
        return (priceInCents / 100.0).ToString("F2");
    }

    private async Task OnQuantityChanged(int newQuantity)
    {
        if (newQuantity == 0)
        {
            await RemoveFromCartAsync();
            return;
        }

        await UpdateQuantityAsync(newQuantity);
    }

    private async Task RemoveFromCartAsync()
    {
        _isUpdating = true;

        await CartService.RemoveFromCartAsync(Item, EventCallback.Empty);

        _isUpdating = false;
    }

    private async Task UpdateQuantityAsync(int newQuantity)
    {
        _isUpdating = true;

        await CartService.UpdateQuantityAsync(newQuantity, Item, EventCallback.Empty);

        _isUpdating = false;

    }
}