@using GameVault.Shared.Models
@using GameVault.Shared.DTOs
@inject HttpClient Http
@inject ILogger<CartItemCard> Logger

<div>
    <img src="@Item.ThumbnailUrl" alt="@Item.ListingName" />
    
    <div>
        <h3>@Item.ListingName</h3>
        <p>Sold by: @Item.VendorName</p>
        <p>Price: $@FormatPrice(Item.PriceInCents)</p>
        <p>Quantity: @Item.Quantity</p>
        <p>Total Price: $@FormatPrice(Item.LineTotalInCents)</p>
    
        <QuantitySelector
            Quantity="@Item.Quantity"
            QuantityChanged="OnQuantityChanged" />
    
        <button @onclick="RemoveFromCartAsync" disabled="@_isUpdating">Remove</button>
    </div>
</div>

@code 
{
    [Parameter] public CartItemDto Item { get; set; } = null!;
    [Parameter] public EventCallback OnCartChanged { get; set; }
    
    private bool _isUpdating = false;

    private string FormatPrice(int priceInCents)
    {
        return (priceInCents / 100.0).ToString("F2");
    }

    private async Task OnQuantityChanged(int newQuantity)
    {
        if (newQuantity == 0)
        {
            await RemoveFromCartAsync();
            return;
        }

        await UpdateQuantityAsync(newQuantity);
    }

    private async Task RemoveFromCartAsync()
    {
        _isUpdating = true;

        try
        {
            var response = await Http.DeleteAsync($"/api/cart/item/{Item.ListingId}");

            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("removed cart item");
                await OnCartChanged.InvokeAsync();
            }
            else
            {
                Logger.LogError("removal failed", Item.ListingId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "removal error");
        }
        finally
        {
            _isUpdating = false;
        }
    }

    private async Task UpdateQuantityAsync(int newQuantity)
    {
        _isUpdating = true;

        try
        {
            var response = await Http.PutAsJsonAsync($"cart/item/{Item.ListingId}/quantity", newQuantity);

            if (response.IsSuccessStatusCode)
            {
                Logger.LogInformation("qty updated", Item.ListingId);
                Item.Quantity = newQuantity;
                await OnCartChanged.InvokeAsync();
            }
            else
            {
                Logger.LogError("qty update failed", Item.ListingId);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "update error");
        }
        finally
        {
            _isUpdating = false;
        }
    }
}